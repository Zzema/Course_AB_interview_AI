import React from 'react';
import { GameState } from '../types';

interface SocialComparisonProps {
  gameState: GameState;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞ —Ñ–æ–Ω–µ –¥—Ä—É–≥–∏—Ö (–ø—Å–µ–≤–¥–æ-–¥–∞–Ω–Ω—ã–µ)
 * 
 * –õ–û–ì–ò–ö–ê:
 * - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é" –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
 * - –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
 * - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞
 */
const SocialComparison: React.FC<SocialComparisonProps> = ({ gameState }) => {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ" –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const metrics = calculateSocialMetrics(gameState);

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <span style={styles.title}>üìä –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è</span>
        <span style={styles.subtitle}>–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</span>
      </div>

      <div style={styles.metricsGrid}>
        {/* –°–µ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
        <MetricCard
          icon="üî•"
          label="–°–µ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
          value={`${gameState.activitySeries?.currentSeries || 0} –¥–Ω–µ–π`}
          percentile={metrics.seriesPercentile}
          comparison={metrics.seriesComparison}
        />

        {/* –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ */}
        <MetricCard
          icon="üìö"
          label="–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤"
          value={`${gameState.questionAttempts?.length || 0}`}
          percentile={metrics.questionsPercentile}
          comparison={metrics.questionsComparison}
        />

        {/* –û–ø—ã—Ç (—Ä–µ–π—Ç–∏–Ω–≥) */}
        <MetricCard
          icon="‚≠ê"
          label="–û–±—â–∏–π –æ–ø—ã—Ç"
          value={`${gameState.rating}`}
          percentile={metrics.xpPercentile}
          comparison={metrics.xpComparison}
        />

        {/* –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ */}
        <MetricCard
          icon="üéØ"
          label="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"
          value={`${metrics.avgScore.toFixed(1)}/10`}
          percentile={metrics.scorePercentile}
          comparison={metrics.scoreComparison}
        />
      </div>

      {/* –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      <div style={styles.motivation}>
        {getMotivationalMessage(metrics)}
      </div>
    </div>
  );
};

interface MetricCardProps {
  icon: string;
  label: string;
  value: string;
  percentile: number;
  comparison: string;
}

const MetricCard: React.FC<MetricCardProps> = ({ icon, label, value, percentile, comparison }) => {
  const color = getPercentileColor(percentile);
  
  return (
    <div style={styles.metricCard}>
      <div style={styles.metricIcon}>{icon}</div>
      <div style={styles.metricLabel}>{label}</div>
      <div style={styles.metricValue}>{value}</div>
      <div style={{ ...styles.metricPercentile, color }}>
        –¢–æ–ø {percentile}%
      </div>
      <div style={styles.metricComparison}>{comparison}</div>
    </div>
  );
};

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

interface SocialMetrics {
  seriesPercentile: number;
  seriesComparison: string;
  questionsPercentile: number;
  questionsComparison: string;
  xpPercentile: number;
  xpComparison: string;
  avgScore: number;
  scorePercentile: number;
  scoreComparison: string;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ" —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function calculateSocialMetrics(gameState: GameState): SocialMetrics {
  const currentSeries = gameState.activitySeries?.currentSeries || 0;
  const totalQuestions = gameState.questionAttempts?.length || 0;
  const rating = gameState.rating;
  const attempts = gameState.questionAttempts || [];
  
  // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
  const avgScore = attempts.length > 0
    ? attempts.reduce((sum, a) => sum + a.feedback.overallScore, 0) / attempts.length
    : 0;

  // === –°–ï–†–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
  // –õ–æ–≥–∏–∫–∞: –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±—Ä–æ—Å–∞—é—Ç –ø–æ—Å–ª–µ 1-2 –¥–Ω–µ–π
  let seriesPercentile: number;
  if (currentSeries === 0) seriesPercentile = 70;
  else if (currentSeries <= 2) seriesPercentile = 50;
  else if (currentSeries <= 5) seriesPercentile = 30;
  else if (currentSeries <= 10) seriesPercentile = 15;
  else if (currentSeries <= 20) seriesPercentile = 5;
  else seriesPercentile = 1;

  const seriesComparison = 
    currentSeries === 0 ? '–ù–∞—á–Ω–∏ —Å–µ—Ä–∏—é —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!' :
    currentSeries <= 2 ? '–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!' :
    currentSeries <= 5 ? '–û—Ç–ª–∏—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞!' :
    currentSeries <= 10 ? '–¢—ã —Å—Ä–µ–¥–∏ —Å–∞–º—ã—Ö —É–ø–æ—Ä–Ω—ã—Ö!' :
    '–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–∏! üèÜ';

  // === –ö–û–õ–ò–ß–ï–°–¢–í–û –í–û–ü–†–û–°–û–í ===
  let questionsPercentile: number;
  if (totalQuestions === 0) questionsPercentile = 100;
  else if (totalQuestions <= 5) questionsPercentile = 80;
  else if (totalQuestions <= 20) questionsPercentile = 60;
  else if (totalQuestions <= 50) questionsPercentile = 40;
  else if (totalQuestions <= 100) questionsPercentile = 20;
  else if (totalQuestions <= 200) questionsPercentile = 10;
  else questionsPercentile = 3;

  const questionsComparison =
    totalQuestions === 0 ? '–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å!' :
    totalQuestions <= 5 ? '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ!' :
    totalQuestions <= 20 ? '–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!' :
    totalQuestions <= 50 ? '–í–ø–µ—á–∞—Ç–ª—è—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!' :
    totalQuestions <= 100 ? '–¢—ã —Å—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö!' :
    '–õ–µ–≥–µ–Ω–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏! üéì';

  // === –û–ü–´–¢ (–†–ï–ô–¢–ò–ù–ì) ===
  // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
  const expectedXP = totalQuestions * 15; // –ø—Ä–∏–º–µ—Ä–Ω–æ 15 XP –∑–∞ –≤–æ–ø—Ä–æ—Å
  let xpPercentile: number;
  if (rating < expectedXP * 0.3) xpPercentile = 90;
  else if (rating < expectedXP * 0.6) xpPercentile = 70;
  else if (rating < expectedXP * 0.9) xpPercentile = 50;
  else if (rating < expectedXP * 1.2) xpPercentile = 30;
  else if (rating < expectedXP * 1.5) xpPercentile = 15;
  else xpPercentile = 5;

  const xpComparison =
    rating <= 0 ? '–ù–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø—ã—Ç!' :
    rating < 100 ? '–ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ!' :
    rating < 500 ? '–¢—ã –Ω–∞–±–∏—Ä–∞–µ—à—å –æ–±–æ—Ä–æ—Ç—ã!' :
    rating < 1000 ? '–í–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' :
    rating < 2000 ? '–¢—ã –º–∞—Å—Ç–µ—Ä! ‚ö°' :
    '–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞! üëë';

  // === –°–†–ï–î–ù–Ø–Ø –û–¶–ï–ù–ö–ê ===
  let scorePercentile: number;
  if (avgScore < 4) scorePercentile = 95;
  else if (avgScore < 5) scorePercentile = 80;
  else if (avgScore < 6) scorePercentile = 60;
  else if (avgScore < 7) scorePercentile = 40;
  else if (avgScore < 8) scorePercentile = 25;
  else if (avgScore < 9) scorePercentile = 10;
  else scorePercentile = 3;

  const scoreComparison =
    avgScore < 5 ? '–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!' :
    avgScore < 6 ? '–•–æ—Ä–æ—à–∞—è –±–∞–∑–∞!' :
    avgScore < 7 ? '–£–≤–µ—Ä–µ–Ω–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å!' :
    avgScore < 8 ? '–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤!' :
    avgScore < 9 ? '–¢—ã —Å—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö! üíé' :
    '–ò–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã! üèÜ';

  return {
    seriesPercentile,
    seriesComparison,
    questionsPercentile,
    questionsComparison,
    xpPercentile,
    xpComparison,
    avgScore,
    scorePercentile,
    scoreComparison
  };
}

function getPercentileColor(percentile: number): string {
  if (percentile <= 5) return '#4caf50'; // –∑–µ–ª–µ–Ω—ã–π - —Ç–æ–ø 5%
  if (percentile <= 20) return '#2196f3'; // —Å–∏–Ω–∏–π - —Ç–æ–ø 20%
  if (percentile <= 50) return '#ff9800'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π - —Å—Ä–µ–¥–Ω–∏–π
  return '#9e9e9e'; // —Å–µ—Ä—ã–π - –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
}

function getMotivationalMessage(metrics: SocialMetrics): string {
  const bestPercentile = Math.min(
    metrics.seriesPercentile,
    metrics.questionsPercentile,
    metrics.xpPercentile,
    metrics.scorePercentile
  );

  if (bestPercentile <= 5) {
    return 'üèÜ –¢—ã –≤ —ç–ª–∏—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!';
  } else if (bestPercentile <= 20) {
    return '‚≠ê –¢—ã –≤ —Ç–æ–ø–µ! –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ª–µ–≥–µ–Ω–¥–æ–π!';
  } else if (bestPercentile <= 50) {
    return 'üí™ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!';
  } else {
    return 'üéØ –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! –ù–∞—á–Ω–∏ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!';
  }
}

// ============================================================================
// –°–¢–ò–õ–ò
// ============================================================================

const styles: Record<string, React.CSSProperties> = {
  container: {
    background: 'linear-gradient(135deg, rgba(99, 102, 241, 0.1) 0%, rgba(139, 92, 246, 0.1) 100%)',
    borderRadius: '16px',
    padding: '1.5rem',
    border: '1px solid rgba(99, 102, 241, 0.2)',
    marginBottom: '2rem'
  },
  header: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginBottom: '1.5rem'
  },
  title: {
    fontSize: '1.25rem',
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: '0.25rem'
  },
  subtitle: {
    fontSize: '0.875rem',
    color: '#6b7280'
  },
  metricsGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
    gap: '1rem',
    marginBottom: '1.5rem'
  },
  metricCard: {
    background: 'white',
    borderRadius: '12px',
    padding: '1rem',
    textAlign: 'center',
    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',
    border: '1px solid rgba(0, 0, 0, 0.05)'
  },
  metricIcon: {
    fontSize: '2rem',
    marginBottom: '0.5rem'
  },
  metricLabel: {
    fontSize: '0.75rem',
    color: '#6b7280',
    marginBottom: '0.25rem',
    fontWeight: '500'
  },
  metricValue: {
    fontSize: '1.125rem',
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: '0.5rem'
  },
  metricPercentile: {
    fontSize: '0.875rem',
    fontWeight: 'bold',
    marginBottom: '0.25rem'
  },
  metricComparison: {
    fontSize: '0.75rem',
    color: '#6b7280',
    fontStyle: 'italic'
  },
  motivation: {
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    color: 'white',
    padding: '1rem',
    borderRadius: '12px',
    textAlign: 'center',
    fontWeight: '600',
    fontSize: '0.95rem',
    boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'
  }
};

export default SocialComparison;

