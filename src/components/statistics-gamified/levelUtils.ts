export type LevelName = 'junior' | 'mid' | 'senior' | 'staff';

interface LevelInfo {
    name: LevelName;
    displayName: string;
    min: number;
    max: number;
}

/**
 * –£—Ä–æ–≤–Ω–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ (–Ω–µ –ø—É—Ç–∞—Ç—å —Å —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π!)
 * 
 * –≠—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å - –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –∏ –ø–∞–¥–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤.
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º.
 * 
 * –†–∞—Å—á–µ—Ç XP –¥–ª—è —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:
 * - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 5
 * - –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: 7
 * - XP –∑–∞ –≤–æ–ø—Ä–æ—Å: 10 * 5 * 0.7 = 35 XP
 * 
 * –ù–æ–≤–∏—á–æ–∫ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫: 500 XP ‚âà 14 –≤–æ–ø—Ä–æ—Å–æ–≤
 * –ü—Ä–∞–∫—Ç–∏–∫ ‚Üí –ú–∞—Å—Ç–µ—Ä: 1500 XP ‚âà 43 –≤–æ–ø—Ä–æ—Å–∞ (–≤—Å–µ–≥–æ ~57 –≤–æ–ø—Ä–æ—Å–æ–≤)
 * –ú–∞—Å—Ç–µ—Ä ‚Üí –≠–∫—Å–ø–µ—Ä—Ç: 3500 XP ‚âà 100 –≤–æ–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ–≥–æ ~157 –≤–æ–ø—Ä–æ—Å–æ–≤)
 */
const LEVELS: LevelInfo[] = [
    { name: 'junior', displayName: '–ù–û–í–ò–ß–û–ö', min: 0, max: 500 },
    { name: 'mid', displayName: '–ü–†–ê–ö–¢–ò–ö', min: 500, max: 1500 },
    { name: 'senior', displayName: '–ú–ê–°–¢–ï–†', min: 1500, max: 3500 },
    { name: 'staff', displayName: '–≠–ö–°–ü–ï–†–¢', min: 3500, max: Infinity }
];

export interface LevelData {
    currentLevel: LevelName;
    currentLevelName: string;
    nextLevel: LevelName | null;
    nextLevelName: string;
    currentXP: number;
    nextLevelXP: number;
    progress: number;
    numericLevel: number; // For "Lvl 12" type display
}

export function calculateLevel(xp: number): LevelData {
    // Find current level
    let currentLevelInfo = LEVELS[0];
    for (const level of LEVELS) {
        if (xp >= level.min && xp < level.max) {
            currentLevelInfo = level;
            break;
        }
    }

    // Find next level
    const currentIndex = LEVELS.findIndex(l => l.name === currentLevelInfo.name);
    const nextLevelInfo = currentIndex < LEVELS.length - 1 ? LEVELS[currentIndex + 1] : null;

    // Calculate progress within current level
    const levelMin = currentLevelInfo.min;
    const levelMax = currentLevelInfo.max === Infinity ? levelMin + 1000 : currentLevelInfo.max;
    const levelRange = levelMax - levelMin;
    const currentProgress = xp - levelMin;
    const progress = Math.min((currentProgress / levelRange) * 100, 100);

    // Calculate numeric level (for visual display)
    // Map XP to a 1-100 scale more granularly
    const numericLevel = Math.floor(xp / 100) + 1;

    return {
        currentLevel: currentLevelInfo.name,
        currentLevelName: currentLevelInfo.displayName,
        nextLevel: nextLevelInfo?.name || null,
        nextLevelName: nextLevelInfo?.displayName || 'MAX LEVEL',
        currentXP: xp,
        nextLevelXP: levelMax,
        progress,
        numericLevel
    };
}

export function scoreToLevel(score: number): number {
    // Convert 0-100 score to level 1-10
    return Math.ceil(score / 10) || 1;
}

export function getAbilityDescription(score: number): string {
    if (score >= 90) return '–ú–∞—Å—Ç–µ—Ä! –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã üåü';
    if (score >= 75) return '–•–æ—Ä–æ—à–µ–µ –≤–ª–∞–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º';
    if (score >= 50) return '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞';
    return '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ñ–æ–∫—É—Å–∞ –Ω–∞ —ç—Ç–æ–π —Ç–µ–º–µ';
}

