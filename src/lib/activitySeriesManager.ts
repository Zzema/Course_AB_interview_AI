/**
 * ============================================================================
 * ACTIVITY SERIES MANAGER
 * ============================================================================
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —Å–µ—Ä–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ milestone'–∞–º–∏ (–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ 3, 7, 14, 30 –¥–Ω–µ–π)
 * - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
 * - –ü—Ä–µ—Ç–µ–Ω–∑–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ milestone'—ã
 * 
 * –õ–æ–≥–∏–∫–∞ —Å–µ—Ä–∏–∏:
 * - –°–µ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)
 * - –°–µ—Ä–∏—è –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
 * - –ü—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏ - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–µ—Ä–∏—è —Å 1 –¥–Ω—è
 * - –†–µ–∫–æ—Ä–¥ —Å–µ—Ä–∏–∏ (longestSeries) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞
 */

import { ActivitySeries, SeriesMilestone, GameState } from '../types';

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø MILESTONE'–û–í
// ============================================================================

/**
 * –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
 * –í–ê–ñ–ù–û: –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω - –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É
 */
const SERIES_MILESTONES_CONFIG: Omit<SeriesMilestone, 'unlocked' | 'claimed'>[] = [
  {
    days: 3,
    reward: {
      type: 'item',
      value: 1,
      itemType: 'question_skip',
      description: 'üé≤ –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞'
    }
  },
  {
    days: 5,
    reward: {
      type: 'xp',
      value: 30,
      description: '+30 –±–æ–Ω—É—Å–Ω–æ–≥–æ XP'
    }
  },
  {
    days: 7,
    reward: {
      type: 'xp',
      value: 70, // –±—ã–ª–æ 100
      description: '+70 –±–æ–Ω—É—Å–Ω–æ–≥–æ XP'
    }
  },
  {
    days: 10,
    reward: {
      type: 'xp',
      value: 50,
      description: '+50 –±–æ–Ω—É—Å–Ω–æ–≥–æ XP'
    }
  },
  {
    days: 14,
    reward: {
      type: 'item',
      value: 1,
      itemType: 'series_protection',
      description: 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —Å–µ—Ä–∏–∏'
    }
  },
  {
    days: 21,
    reward: {
      type: 'xp',
      value: 200,
      description: '+200 –±–æ–Ω—É—Å–Ω–æ–≥–æ XP'
    }
  },
  {
    days: 30,
    reward: {
      type: 'xp',
      value: 300, // –±—ã–ª–æ 500
      description: '+300 –±–æ–Ω—É—Å–Ω–æ–≥–æ XP'
    }
  }
];

// ============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export function initializeActivitySeries(): ActivitySeries {
  return {
    currentSeries: 0,
    longestSeries: 0,
    lastActiveDate: '',
    todayCompleted: false,
    seriesMilestones: SERIES_MILESTONES_CONFIG.map(m => ({
      ...m,
      unlocked: false,
      claimed: false
    }))
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
 * 
 * @param gameState - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @param currentDate - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è –∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è
 * 
 * –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:
 * - 'continued': —Å–µ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (–≤—á–µ—Ä–∞ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω)
 * - 'started': –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏ (–ø–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ –∏–ª–∏ –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞)
 * - 'broken': —Å–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ (–ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å)
 * - 'same_day': –∑–∞—Ö–æ–¥ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å (—Å–µ—Ä–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
 */
export function checkAndUpdateSeries(
  gameState: GameState,
  currentDate: string
): { 
  series: ActivitySeries; 
  status: 'continued' | 'started' | 'broken' | 'same_day';
  previousSeries?: number; // –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª–∫–µ –ø–æ—Ç–µ—Ä–∏
} {
  const series = gameState.activitySeries || initializeActivitySeries();
  const lastDate = series.lastActiveDate;
  
  // ========================================
  // –°–õ–£–ß–ê–ô 1: –¢–æ—Ç –∂–µ –¥–µ–Ω—å (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞—Ö–æ–¥)
  // ========================================
  if (lastDate === currentDate) {
    console.log('üîÑ Same day login - no series update');
    return { series, status: 'same_day' };
  }
  
  // ========================================
  // –°–õ–£–ß–ê–ô 2: –í—á–µ—Ä–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (—Å–µ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è)
  // ========================================
  const yesterday = getYesterdayDate(currentDate);
  const isConsecutive = lastDate === yesterday;
  
  if (isConsecutive) {
    console.log('‚úÖ Series continued!', { from: lastDate, to: currentDate });
    
    const newSeriesLength = series.currentSeries + 1;
    const newSeries: ActivitySeries = {
      ...series,
      currentSeries: newSeriesLength,
      longestSeries: Math.max(series.longestSeries, newSeriesLength),
      lastActiveDate: currentDate,
      todayCompleted: false // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –Ω–æ–≤—ã—Ö milestone'–æ–≤
    newSeries.seriesMilestones = newSeries.seriesMilestones.map(m => {
      if (m.days <= newSeriesLength && !m.unlocked) {
        console.log(`üéÅ Milestone unlocked: ${m.days} days!`);
        return { ...m, unlocked: true };
      }
      return m;
    });
    
    return { series: newSeries, status: 'continued' };
  }
  
  // ========================================
  // –°–õ–£–ß–ê–ô 3: –ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ –∏–ª–∏ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
  // ========================================
  if (!lastDate || series.currentSeries === 0) {
    console.log('üÜï Starting new series');
    
    const newSeries: ActivitySeries = {
      ...series,
      currentSeries: 1,
      longestSeries: Math.max(series.longestSeries, 1),
      lastActiveDate: currentDate,
      todayCompleted: false
    };
    
    return { series: newSeries, status: 'started' };
  }
  
  // ========================================
  // –°–õ–£–ß–ê–ô 4: –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ (–ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å)
  // ========================================
  console.log('üíî Series broken!', { 
    lastDate, 
    currentDate, 
    lostSeries: series.currentSeries 
  });
  
  const previousSeriesLength = series.currentSeries;
  
  const newSeries: ActivitySeries = {
    ...series,
    currentSeries: 1, // –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
    lastActiveDate: currentDate,
    todayCompleted: false,
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–µ—Ç–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ milestone'—ã
    seriesMilestones: series.seriesMilestones.map(m => ({
      ...m,
      unlocked: false,
      claimed: false
    }))
  };
  
  return { 
    series: newSeries, 
    status: 'broken',
    previousSeries: previousSeriesLength
  };
}

/**
 * –û—Ç–º–µ—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª daily quest
 */
export function completeDailyQuest(series: ActivitySeries): ActivitySeries {
  console.log('‚úÖ Daily quest completed for today');
  
  return {
    ...series,
    todayCompleted: true
  };
}

/**
 * –ü—Ä–µ—Ç–µ–Ω–∑–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ milestone —Å–µ—Ä–∏–∏
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É"
 * 
 * @param series - —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
 * @param days - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π milestone'–∞ –¥–ª—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏
 * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è —Å –ø—Ä–µ—Ç–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º milestone'–æ–º
 */
export function claimSeriesMilestone(
  series: ActivitySeries,
  days: number
): ActivitySeries {
  console.log(`üéÅ Claiming milestone reward: ${days} days`);
  
  return {
    ...series,
    seriesMilestones: series.seriesMilestones.map(m => 
      m.days === days ? { ...m, claimed: true } : m
    )
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π milestone –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–π milestone
 */
export function getNextMilestone(series: ActivitySeries): SeriesMilestone | null {
  const nextMilestone = series.seriesMilestones.find(
    m => m.days > series.currentSeries
  );
  
  return nextMilestone || null;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ–ø—Ä–µ—Ç–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ milestone'—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
 */
export function getUnclaimedMilestones(series: ActivitySeries): SeriesMilestone[] {
  return series.seriesMilestones.filter(
    m => m.unlocked && !m.claimed
  );
}

// ============================================================================
// HELPER –§–£–ù–ö–¶–ò–ò (—Ä–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏)
// ============================================================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
 * @param dateString - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @returns –≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 */
function getYesterdayDate(dateString: string): string {
  const date = new Date(dateString + 'T00:00:00'); // –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
  date.setDate(date.getDate() - 1);
  return formatDateToYYYYMMDD(date);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (23:59:59)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è expiresAt –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
 */
export function getEndOfDay(dateString: string): number {
  const date = new Date(dateString + 'T23:59:59');
  return date.getTime();
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getCurrentDateString(): string {
  const now = new Date();
  return formatDateToYYYYMMDD(now);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å Date –≤ YYYY-MM-DD
 */
function formatDateToYYYYMMDD(date: Date): string {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏
 */
export function getDaysBetween(date1: string, date2: string): number {
  const d1 = new Date(date1 + 'T00:00:00');
  const d2 = new Date(date2 + 'T00:00:00');
  const diffTime = Math.abs(d2.getTime() - d1.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫ –ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç
 */
export function isQuestExpired(expiresAt: number): boolean {
  return Date.now() > expiresAt;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X—á Y–º"
 */
export function getTimeRemaining(expiresAt: number): string {
  const now = Date.now();
  const diff = expiresAt - now;
  
  if (diff <= 0) {
    return '–ò—Å—Ç–µ–∫';
  }
  
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º`;
  }
  
  return `${minutes}–º`;
}

