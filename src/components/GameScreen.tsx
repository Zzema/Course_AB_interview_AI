import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { GoogleGenAI, Type } from '@google/genai';
import { GameState, User, Feedback, Category, KeyPoint } from '../types';
import { QUESTION_DATABASE, CATEGORIES_CONFIG, KEY_POINT_TO_CATEGORY_MAP } from '../data/constants';
import { GEMINI_PROXY_URL } from '../config/config';
import { styles } from '../styles';
import { createInitialGameState } from '../lib/api';
import ProgressBar from './ProgressBar';
import FeedbackOverlay from './FeedbackOverlay';

interface GameScreenProps {
    user: User;
    onLogout: () => void;
    gameState: GameState;
    setGameState: (state: GameState) => void;
    onShowStats: () => void;
}

const SIMPLE_QUESTION_DIFFICULTY = 4;
const GOOD_SCORE_THRESHOLD = 8;
const STREAK_THRESHOLD = 3;

// Create a reverse map from category name (e.g., "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") to category key (e.g., "statistics")
const categoryNameMap: Record<string, string> = Object.entries(CATEGORIES_CONFIG).reduce((acc, [key, { name }]) => {
    acc[name] = key;
    return acc;
}, {} as Record<string, string>);

const MIN_ANSWER_LENGTH = 100;
const RECOMMENDED_MAX_LENGTH = 800;
const HARD_MAX_LENGTH = 1000;

const GameScreen: React.FC<GameScreenProps> = ({ user, onLogout, gameState, setGameState, onShowStats }) => {
    const [answer, setAnswer] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [feedback, setFeedback] = useState<Feedback | null>(null);
    const [lastEarnedPoints, setLastEarnedPoints] = useState<number>(0);
    const [levelUpNotification, setLevelUpNotification] = useState<string | null>(null);
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∏ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
    const currentQuestion = useMemo(() => {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (gameState.currentQuestionId) {
            const existingQuestion = QUESTION_DATABASE.find(q => q.id === gameState.currentQuestionId);
            if (existingQuestion) {
                return existingQuestion;
            }
        }
        
        // –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        const difficulty = gameState.selectedDifficulty || 'junior';
        const askedIds = gameState.askedQuestionIds || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
        const currentLevelQuestions = difficulty === 'all' 
            ? QUESTION_DATABASE 
            : QUESTION_DATABASE.filter(q => q.seniority === difficulty);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–∞–ª–∏
        const availableQuestions = currentLevelQuestions.filter(q => !askedIds.includes(q.id));
        
        if (availableQuestions.length > 0) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            const randomIndex = Math.floor(Math.random() * availableQuestions.length);
            const newQuestion = availableQuestions[randomIndex];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            if (newQuestion && !gameState.currentQuestionId) {
                setTimeout(() => {
                    setGameState({
                        ...gameState,
                        currentQuestionId: newQuestion.id
                    });
                }, 0);
            }
            
            return newQuestion;
        }
        
        // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        const levelOrder: Array<'junior' | 'mid' | 'senior' | 'staff'> = ['junior', 'mid', 'senior', 'staff'];
        const currentLevelIndex = levelOrder.indexOf(difficulty as any);
        
        if (currentLevelIndex < levelOrder.length - 1) {
            // –ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            return null; // –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        }
        
        // –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        return undefined; // –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    }, [gameState.selectedDifficulty, gameState.askedQuestionIds, gameState.currentQuestionId, gameState, setGameState]);
    
    const isGameFinished = currentQuestion === undefined;
    const needLevelUp = currentQuestion === null;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    React.useEffect(() => {
        if (needLevelUp && gameState.selectedDifficulty !== 'all') {
            const levelOrder: Array<'junior' | 'mid' | 'senior' | 'staff'> = ['junior', 'mid', 'senior', 'staff'];
            const currentLevelIndex = levelOrder.indexOf((gameState.selectedDifficulty || 'junior') as any);
            
            if (currentLevelIndex < levelOrder.length - 1) {
                const nextLevel = levelOrder[currentLevelIndex + 1];
                const levelIcons = { junior: 'üå±', mid: '‚≠ê', senior: 'üíé', staff: 'üëë' };
                const levelNames = { junior: 'Junior', mid: 'Mid', senior: 'Senior', staff: 'Staff' };
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                setLevelUpNotification(`${levelIcons[nextLevel]} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${levelNames[nextLevel]}`);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => setLevelUpNotification(null), 3000);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                setTimeout(() => {
                    setGameState({
                        ...gameState,
                        selectedDifficulty: nextLevel,
                        currentQuestionIndex: 0,
                        currentQuestionId: undefined, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                    });
                }, 100);
            }
        }
    }, [needLevelUp, gameState, setGameState]);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth <= 768);
        };
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–ª–∏–Ω–µ
    const handleAnswerChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        const newValue = e.target.value;
        // Hard limit - –Ω–µ –¥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        if (newValue.length <= HARD_MAX_LENGTH) {
            setAnswer(newValue);
        }
    };

    // –ó–∞–ø—Ä–µ—Ç –∫–æ–ø–∏–ø–∞—Å—Ç–∞
    const handlePaste = (e: React.ClipboardEvent) => {
        e.preventDefault();
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    const getCharCountInfo = () => {
        const length = answer.length;
        
        if (length < MIN_ANSWER_LENGTH) {
            return {
                color: '#ff5252',
                message: `–ú–∏–Ω–∏–º—É–º ${MIN_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`
            };
        } else if (length <= 500) {
            // –û—Ç 100 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ - –∑–µ–ª–µ–Ω—ã–π, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
            return {
                color: '#00e676',
                message: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ ‚úì'
            };
        } else if (length <= RECOMMENDED_MAX_LENGTH) {
            // –û—Ç 500 –¥–æ 800 - –∂–µ–ª—Ç—ã–π, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
            return {
                color: '#ffc400',
                message: `–ú–æ–∂–Ω–æ –∫–æ—Ä–æ—á–µ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–æ 500)`
            };
        } else if (length <= HARD_MAX_LENGTH) {
            // –û—Ç 800 –¥–æ 1000 - –æ—Ä–∞–Ω–∂–µ–≤—ã–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å
            return {
                color: '#ff9800',
                message: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å (–ª–∏–º–∏—Ç ${HARD_MAX_LENGTH})`
            };
        }
        
        return {
            color: '#ff5252',
            message: '–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç'
        };
    };

    const evaluateAnswer = useCallback(async () => {
        if (!answer.trim()) return;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if (answer.length < MIN_ANSWER_LENGTH) {
            alert(`–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º ${MIN_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.`);
            return;
        }
        
        setIsLoading(true);

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloudflare Worker –ø—Ä–æ–∫—Å–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
            const prompt = `
                –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π Staff-—É—Ä–æ–≤–Ω—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –∏–∑ BigTech, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
                
                –ö–û–ù–¢–ï–ö–°–¢ –í–û–ü–†–û–°–ê:
                - –í–æ–ø—Ä–æ—Å: "${currentQuestion.text}"
                - –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!): ${currentQuestion.keyPoints?.join(', ') || '–ù–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö'}
                - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: ${currentQuestion.categories.map(c => CATEGORIES_CONFIG[c as Category].name).join(', ')}

                –û–¢–í–ï–¢ –ö–ê–ù–î–ò–îATA:
                "${answer}"

                –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
                –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—É—é, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

                –û–ë–©–ò–ï –ü–†–ò–ù–¶–ò–ü–´ –û–¶–ï–ù–ö–ò:
                - –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –±–∞–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç —Ä–∞—Å–∫—Ä—ã–ª '–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'.
                - –ö—Ä–∞—Ç–∫–∏–π, –Ω–æ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ª—É—á—à–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –∏ —Ä–∞–∑–º—ã—Ç–æ–≥–æ. –ù–µ —Å–Ω–∏–∂–∞–π –æ—Ü–µ–Ω–∫—É –∑–∞ –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã.

                –ü–†–ê–í–ò–õ–ê –î–õ–Ø JSON:
                1.  "overallScore": –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10.
                2.  "evaluation": { 
                        "strengths": ["–°–ø–∏—Å–æ–∫ –∏–∑ 1-2 –∫–ª—é—á–µ–≤—ã—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –æ—Ç–≤–µ—Ç–∞."], 
                        "weaknesses": ["–°–ø–∏—Å–æ–∫ –∏–∑ 1-2 –≥–ª–∞–≤–Ω—ã—Ö —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞. –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï: –∑–¥–µ—Å—å —Ç—ã –¥–æ–ª–∂–µ–Ω –ß–ï–¢–ö–û —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –∏–∑ '–ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏' –∫–∞–Ω–¥–∏–¥–∞—Ç —É–ø—É—Å—Ç–∏–ª –∏–ª–∏ –ø–æ–Ω—è–ª –Ω–µ–≤–µ—Ä–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–µ –±—ã–ª —Ä–∞—Å–∫—Ä—ã—Ç –∞—Å–ø–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –º–æ—â–Ω–æ—Å—Ç–∏' –∏–ª–∏ '–ù–µ–≤–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π'."] 
                    }
                3.  "categoryBreakdown": –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤. –î–ª—è –ö–ê–ñ–î–û–ô –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–∞", –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
                    -   "category": –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
                    -   "score": –û—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10.
                    -   "comment": –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (10-20 —Å–ª–æ–≤), –æ–±—ä—è—Å–Ω—è—é—â–∏–π –æ—Ü–µ–Ω–∫—É –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
                
                –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å –ø–æ–ª—è–º–∏: overallScore (—á–∏—Å–ª–æ 0-10), evaluation (–æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–∞–º–∏ strengths –∏ weaknesses), categoryBreakdown (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ category, score, comment).
            `;

            // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Cloudflare Worker
            const proxyResponse = await fetch(GEMINI_PROXY_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                    responseMimeType: 'application/json',
                    responseSchema: {
                            type: 'object',
                        properties: {
                                overallScore: { type: 'number' },
                            evaluation: {
                                    type: 'object',
                                    properties: {
                                        strengths: { type: 'array', items: { type: 'string' } },
                                        weaknesses: { type: 'array', items: { type: 'string' } }
                                    },
                                    required: ['strengths', 'weaknesses']
                                },
                                categoryBreakdown: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            category: { type: 'string' },
                                            score: { type: 'number' },
                                            comment: { type: 'string' },
                                        },
                                        required: ['category', 'score', 'comment'],
                                    }
                                }
                            },
                            required: ['overallScore', 'evaluation', 'categoryBreakdown'],
                        }
                    }
                })
            });

            if (!proxyResponse.ok) {
                throw new Error(`Proxy error: ${proxyResponse.status} ${proxyResponse.statusText}`);
            }

            const proxyData = await proxyResponse.json();
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini
            const resultJsonText = proxyData.candidates?.[0]?.content?.parts?.[0]?.text || 
                                   JSON.stringify(proxyData);
            
            const parsedFeedback: Feedback = JSON.parse(resultJsonText);
            setFeedback(parsedFeedback);

            const newCategoryScores = { ...gameState.categoryScores };
            const newKeyPointScores = { ...gameState.keyPointScores };

            parsedFeedback.categoryBreakdown.forEach(item => {
                const categoryKey = categoryNameMap[item.category] as Category;
                if (categoryKey && newCategoryScores[categoryKey]) {
                    newCategoryScores[categoryKey].totalScore += item.score;
                    newCategoryScores[categoryKey].count += 1;

                    // Distribute category score to the relevant keypoints of the current question
                    currentQuestion.keyPoints?.forEach(kp => {
                        if (KEY_POINT_TO_CATEGORY_MAP[kp] === categoryKey) {
                             if (!newKeyPointScores[kp]) {
                                newKeyPointScores[kp] = { totalScore: 0, count: 0 };
                            }
                            newKeyPointScores[kp].totalScore += item.score;
                            newKeyPointScores[kp].count += 1;
                        }
                    });
                }
            });

            // Adaptive question logic
            const isSimpleQuestion = currentQuestion.difficulty <= SIMPLE_QUESTION_DIFFICULTY;
            const isGoodScore = parsedFeedback.overallScore >= GOOD_SCORE_THRESHOLD;
            let newStreak = gameState.consecutiveGoodAnswersOnSimpleQuestions || 0;

            if (isSimpleQuestion && isGoodScore) {
                newStreak++;
            } else {
                newStreak = 0;
            }
            
            // Calculate rating with difficulty and quality bonuses
            const difficultyMultiplier = 1 + (currentQuestion.difficulty - 5) * 0.1;
            const basePoints = parsedFeedback.overallScore * difficultyMultiplier;
            
            let qualityBonus = 0;
            if (parsedFeedback.overallScore >= 8) {
                qualityBonus = 5;  // –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            } else if (parsedFeedback.overallScore >= 6) {
                qualityBonus = 2;  // –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç
            }
            
            const earnedPoints = Math.round(basePoints + qualityBonus);
            const newRating = gameState.rating + earnedPoints;
            
            // Save earned points for display in feedback
            setLastEarnedPoints(earnedPoints);
            
            // Update rating history
            const newRatingHistory = [...(gameState.ratingHistory || [0]), newRating];
            
            // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
            const questionAttempt = {
                questionId: currentQuestion.id,
                timestamp: Date.now(),
                answer: answer,
                feedback: parsedFeedback,
                earnedPoints: earnedPoints,
                difficulty: currentQuestion.difficulty,
                seniority: currentQuestion.seniority,
            };
            
            const newQuestionAttempts = [...(gameState.questionAttempts || []), questionAttempt];
            
            setGameState({
                ...gameState,
                rating: newRating,
                categoryScores: newCategoryScores,
                keyPointScores: newKeyPointScores,
                consecutiveGoodAnswersOnSimpleQuestions: newStreak,
                ratingHistory: newRatingHistory,
                questionAttempts: newQuestionAttempts, // üÜï
            });

        } catch (error: any) {
            console.error("Error evaluating answer:", error);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞. ";
            
            if (error.message?.includes('503') || error.message?.includes('Service Unavailable')) {
                errorMessage = "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å Gemini AI –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.\n\n" +
                              "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Google.\n" +
                              "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.\n\n" +
                              "–í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.";
            } else if (error.message?.includes('overloaded')) {
                errorMessage = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å Gemini –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞.\n\n" +
                              "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.";
            } else {
                errorMessage += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.";
            }
            
            alert(errorMessage);
        } finally {
            setIsLoading(false);
        }
    }, [answer, currentQuestion, gameState, setGameState]);


    const handleDifficultyChange = (difficulty: 'all' | 'junior' | 'mid' | 'senior' | 'staff') => {
        setGameState({
            ...gameState,
            selectedDifficulty: difficulty,
            currentQuestionIndex: 0,
            askedQuestionIds: [], // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è
            currentQuestionId: undefined, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        });
        setFeedback(null);
        setAnswer('');
    };

    const handleNextQuestion = () => {
        setFeedback(null);
        setAnswer('');

        // –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º currentQuestionId
        if (currentQuestion) {
            const updatedAskedIds = [...(gameState.askedQuestionIds || []), currentQuestion.id];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            const currentLevel = currentQuestion.seniority as 'junior' | 'mid' | 'senior' | 'staff';
            const updatedLevelProgress = {
                ...gameState.levelProgress,
                [currentLevel]: {
                    ...gameState.levelProgress?.[currentLevel],
                    askedQuestionIds: [
                        ...(gameState.levelProgress?.[currentLevel]?.askedQuestionIds || []),
                        currentQuestion.id
                    ],
                    totalQuestions: gameState.levelProgress?.[currentLevel]?.totalQuestions || 
                        QUESTION_DATABASE.filter(q => q.seniority === currentLevel).length
                }
            };

        setGameState({
            ...gameState,
                askedQuestionIds: updatedAskedIds,
                currentQuestionIndex: gameState.currentQuestionIndex + 1,
                currentQuestionId: undefined, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                levelProgress: updatedLevelProgress
            });
        }
    };

    if (isGameFinished) {
        const totalAsked = gameState.askedQuestionIds?.length || 0;

        return (
            <div style={{...styles.mainContent, ...styles.container, justifyContent: 'center', textAlign: 'center'}}>
                <h2 style={styles.title}>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!</h2>
                <div style={{
                    backgroundColor: 'rgba(106, 90, 205, 0.1)',
                    borderRadius: '16px',
                    padding: '2rem',
                    marginBottom: '2rem',
                    maxWidth: '500px'
                }}>
                    <p style={{fontSize: '1.2rem', marginBottom: '1rem', color: 'var(--text-secondary)'}}>
                        –ü—Ä–æ–π–¥–µ–Ω—ã –≤—Å–µ —É—Ä–æ–≤–Ω–∏: üå± Junior ‚Üí ‚≠ê Mid ‚Üí üíé Senior ‚Üí üëë Staff
                    </p>
                    <p style={{fontSize: '2rem', margin: '1rem 0'}}>
                        –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 
                    </p>
                    <p style={{fontSize: '3rem', fontWeight: 'bold', color: 'var(--primary-color)', margin: '0.5rem 0'}}>
                        {gameState.rating}
                    </p>
                    <p style={{fontSize: '1rem', color: 'var(--text-secondary)', marginTop: '1rem'}}>
                        –ü—Ä–æ–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {totalAsked}
                    </p>
                </div>
                <div style={{display: 'flex', gap: '1rem', justifyContent: 'center', flexWrap: 'wrap'}}>
                    <button 
                        onClick={() => setGameState(createInitialGameState())} 
                        style={styles.submitButton}
                    >
                        üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                </button>
                </div>
            </div>
        )
    }

    return (
        <div style={styles.container}>
            <header style={{
                ...styles.header,
                flexDirection: 'column',
                gap: isMobile ? '0.5rem' : '1rem',
                padding: isMobile ? '0.75rem 1rem' : '1rem 1.5rem',
                alignItems: 'stretch',
                flexWrap: 'nowrap'
            }}>
                {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –†–µ–π—Ç–∏–Ω–≥ + –£—Ä–æ–≤–µ–Ω—å + –ö–Ω–æ–ø–∫–∏ */}
                <div style={{
                    display: 'flex', 
                    alignItems: 'center', 
                    justifyContent: 'space-between',
                    gap: isMobile ? '0.5rem' : '1rem',
                    width: '100%'
                }}>
                    {/* –†–µ–π—Ç–∏–Ω–≥ –∏ —É—Ä–æ–≤–µ–Ω—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ –º–æ–±–∏–ª–∫–µ */}
                    <div style={{
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: isMobile ? '0.5rem' : '0.75rem',
                        flex: '1',
                        minWidth: 0
                    }}>
                        <div style={{
                            ...styles.rating, 
                            fontSize: isMobile ? '1.1rem' : '1.5rem',
                            whiteSpace: 'nowrap'
                        }} title="–†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤">
                            üèÜ {gameState.rating}
                        </div>
                        <div style={{
                            fontSize: isMobile ? '0.7rem' : '0.75rem',
                            color: 'var(--text-secondary)',
                            backgroundColor: 'rgba(106, 90, 205, 0.1)',
                            padding: isMobile ? '0.2rem 0.5rem' : '0.25rem 0.6rem',
                            borderRadius: '6px',
                            fontWeight: '500',
                            whiteSpace: 'nowrap'
                        }}>
                            {({
                                'all': 'üéØ –í—Å–µ',
                                'junior': 'üå± Junior',
                                'mid': '‚≠ê Mid',
                                'senior': 'üíé Senior',
                                'staff': 'üëë Staff'
                            }[gameState.selectedDifficulty || 'all'])}
                        </div>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞ */}
                    <div style={{display: 'flex', gap: '0.5rem', alignItems: 'center'}}>
                        {isMobile && (
                            <>
                                <button onClick={onShowStats} style={{...styles.logoutButton, padding: '0.4rem', fontSize: '1.1rem'}} title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É">
                                   üìä
                                </button>
                                <button onClick={onLogout} style={{...styles.logoutButton, padding: '0.4rem', fontSize: '1.1rem'}} title="–í—ã–π—Ç–∏">
                                    ‚Ü©
                                </button>
                            </>
                        )}
                        {!isMobile && (
                            <>
                                <button onClick={onShowStats} style={styles.logoutButton}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
                                <button onClick={onLogout} style={styles.logoutButton}>–í—ã–π—Ç–∏</button>
                            </>
                        )}
                    </div>
                </div>
                
                {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –°–µ–ª–µ–∫—Ç–æ—Ä —É—Ä–æ–≤–Ω—è + –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                <div style={{display: 'flex', alignItems: 'center', gap: isMobile ? '0.5rem' : '1rem', width: isMobile ? '100%' : 'auto', minWidth: 0, flex: isMobile ? '1 1 100%' : '1 1 auto'}}>
                    {/* –°–µ–ª–µ–∫—Ç–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
                    <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '0.25rem', flex: isMobile ? '0 0 auto' : '0 0 auto', minWidth: 0}}>
                        <div style={{fontSize: isMobile ? '0.7rem' : '0.75rem', color: 'var(--text-secondary)', whiteSpace: 'nowrap'}}>–£—Ä–æ–≤–µ–Ω—å</div>
                        <select 
                            value={gameState.selectedDifficulty || 'all'}
                            onChange={(e) => handleDifficultyChange(e.target.value as any)}
                            style={{
                                padding: isMobile ? '0.4rem 0.5rem' : '0.4rem 0.6rem',
                                borderRadius: '8px',
                                border: '1px solid var(--border-color)',
                                backgroundColor: 'var(--bg-color)',
                                color: 'var(--text-primary)',
                                fontSize: isMobile ? '0.85rem' : '0.85rem',
                                cursor: 'pointer',
                                fontWeight: '500',
                                outline: 'none',
                                transition: 'all 0.2s'
                            }}
                            onMouseOver={(e) => e.currentTarget.style.borderColor = 'var(--primary-color)'}
                            onMouseOut={(e) => e.currentTarget.style.borderColor = 'var(--border-color)'}
                        >
                            <option value="all">{isMobile ? '–í—Å–µ' : '–í—Å–µ —É—Ä–æ–≤–Ω–∏'}</option>
                            <option value="junior">Junior</option>
                            <option value="mid">Mid</option>
                            <option value="senior">Senior</option>
                            <option value="staff">Staff</option>
                        </select>
                    </div>
                    
                    <div style={{width: isMobile ? 'auto' : '220px', flex: isMobile ? '1' : 'initial'}}>
                        {(() => {
                            const difficulty = gameState.selectedDifficulty || 'junior';
                            
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º askedQuestionIds –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
                            const askedIds = gameState.askedQuestionIds || [];
                            const currentLevelQuestions = difficulty === 'all' 
                                ? QUESTION_DATABASE 
                                : QUESTION_DATABASE.filter(q => q.seniority === difficulty);
                            
                            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —É–∂–µ –∑–∞–¥–∞–Ω–æ
                            const askedThisLevel = difficulty === 'all'
                                ? askedIds.length  // –î–ª—è "all" –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞
                                : askedIds.filter(id => 
                                    currentLevelQuestions.some(q => q.id === id)
                                  ).length;
                            
                            const totalThisLevel = currentLevelQuestions.length;
                            const remainingThisLevel = totalThisLevel - askedThisLevel;
                            
                            // –û—Ç–ª–∞–¥–∫–∞
                            console.log('Header Debug:', {
                                difficulty,
                                askedIds,
                                askedIdsLength: askedIds.length,
                                totalThisLevel,
                                askedThisLevel,
                                remainingThisLevel
                            });
                            
                            return (
                                <>
                        <div style={{fontSize: isMobile ? '0.65rem' : '0.8rem', color: 'var(--text-secondary)', marginBottom: '4px', textAlign: 'center'}}>
                                        {isMobile ? `${askedThisLevel} / ${remainingThisLevel}` : `–ü—Ä–æ–π–¥–µ–Ω–æ: ${askedThisLevel} | –û—Å—Ç–∞–ª–æ—Å—å: ${remainingThisLevel}`}
                        </div>
                                    <ProgressBar value={(askedThisLevel / totalThisLevel) * 100} />
                                </>
                            );
                        })()}
                    </div>
                    
                    {/* –Æ–∑–µ—Ä –∏–Ω—Ñ–æ (—Ç–æ–ª—å–∫–æ –¥–µ—Å–∫—Ç–æ–ø) */}
                    {!isMobile && (
                        <div style={{...styles.userDisplay, minWidth: 0, flex: '0 0 auto'}}>
                            {user.picture && <img src={user.picture} alt="avatar" style={styles.avatar} />}
                            <span style={{color: 'var(--text-secondary)', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', maxWidth: '150px'}}>{user.name}</span>
                        </div>
                    )}
                </div>
            </header>

            <main style={{
                ...styles.mainContent,
                padding: isMobile ? '0.75rem' : '1.5rem',
                gap: isMobile ? '0.75rem' : '1.5rem'
            }}>
                <div style={{
                    ...styles.gameScreen,
                    gap: isMobile ? '0.75rem' : '1.5rem'
                }} className="fade-in">
                    <div style={{
                        ...styles.questionCard,
                        padding: isMobile ? '0.75rem' : '1.5rem'
                    }}>
                        <div style={{
                            ...styles.questionMeta,
                            flexDirection: isMobile ? 'column' : 'row',
                            alignItems: isMobile ? 'stretch' : 'center',
                            gap: isMobile ? '0.5rem' : '0',
                            fontSize: isMobile ? '0.7rem' : '0.9rem',
                            marginBottom: isMobile ? '0.5rem' : '1rem'
                        }}>
                            <span>–°–ª–æ–∂–Ω–æ—Å—Ç—å: {currentQuestion.difficulty}/10</span>
                            <div style={{
                                display: 'flex', 
                                flexDirection: 'column', 
                                alignItems: isMobile ? 'flex-start' : 'flex-end', 
                                gap: '0.25rem', 
                                textAlign: isMobile ? 'left' : 'right'
                            }}>
                                <span>–£—Ä–æ–≤–µ–Ω—å: {currentQuestion.seniority.charAt(0).toUpperCase() + currentQuestion.seniority.slice(1)}</span>
                                <span>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES_CONFIG[currentQuestion.categories[0] as Category].name}</span>
                            </div>
                        </div>
                        <p 
                            style={{
                                ...styles.questionText,
                                fontSize: isMobile ? '1rem' : '1.2rem',
                                lineHeight: isMobile ? '1.4' : '1.6',
                                marginBottom: isMobile ? '0.75rem' : '1.5rem',
                                userSelect: 'none',
                                WebkitUserSelect: 'none',
                                MozUserSelect: 'none',
                                msUserSelect: 'none'
                            }}
                            onCopy={(e) => e.preventDefault()}
                            onCut={(e) => e.preventDefault()}
                        >
                            {currentQuestion.text}
                        </p>
                        <div style={{ position: 'relative', width: '100%' }}>
                        <textarea
                            value={answer}
                                onChange={handleAnswerChange}
                                onPaste={handlePaste}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç... (–º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)"
                            style={{
                                ...styles.textarea,
                                minHeight: isMobile ? '120px' : '150px',
                                fontSize: isMobile ? '0.9rem' : '1rem',
                                padding: isMobile ? '0.75rem' : '1rem'
                            }}
                            disabled={isLoading}
                        />
                            <div style={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                alignItems: 'center',
                                marginTop: '0.5rem',
                                fontSize: '0.85rem',
                                padding: '0 0.5rem'
                            }}>
                                <div style={{ 
                                    color: getCharCountInfo().color,
                                    fontWeight: '500'
                                }}>
                                    {getCharCountInfo().message}
                                </div>
                                <div style={{ 
                                    color: getCharCountInfo().color,
                                    fontWeight: 'bold'
                                }}>
                                    {answer.length} / {HARD_MAX_LENGTH}
                                </div>
                            </div>
                        </div>
                        <button 
                            onClick={evaluateAnswer} 
                            style={{ 
                                ...styles.submitButton,
                                padding: isMobile ? '0.75rem' : '1rem',
                                fontSize: isMobile ? '0.95rem' : '1rem',
                                opacity: isLoading || answer.length < MIN_ANSWER_LENGTH ? 0.5 : 1 
                            }} 
                            disabled={isLoading || answer.length < MIN_ANSWER_LENGTH}
                            title={answer.length < MIN_ANSWER_LENGTH ? `–ú–∏–Ω–∏–º—É–º ${MIN_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤` : ''}
                        >
                            {isLoading ? '–û—Ü–µ–Ω–∏–≤–∞–µ–º...' : '–û—Ç–≤–µ—Ç–∏—Ç—å'}
                        </button>
                    </div>
                </div>
            </main>

            {feedback && <FeedbackOverlay 
                feedback={feedback} 
                onNext={handleNextQuestion} 
                oldRating={gameState.rating - lastEarnedPoints}
                question={currentQuestion}
                earnedPoints={lastEarnedPoints}
            />}
            
            {/* Level Up Notification */}
            {levelUpNotification && (
                <div style={{
                    position: 'fixed',
                    top: '20px',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    backgroundColor: 'var(--primary-color)',
                    color: 'white',
                    padding: '1rem 2rem',
                    borderRadius: '12px',
                    fontSize: '1.2rem',
                    fontWeight: 'bold',
                    boxShadow: '0 4px 20px rgba(0,0,0,0.3)',
                    zIndex: 10000,
                    animation: 'slideDown 0.3s ease-out'
                }} className="fade-in">
                    {levelUpNotification}
                </div>
            )}
        </div>
    );
};

export default GameScreen;