// FIX: Removed an incorrect import from './constants' that was causing a circular dependency.
// The types are defined below in this file and should not be imported from a file that depends on this one.

export interface LevelProgress {
    askedQuestionIds: number[]; // ID –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
    totalQuestions: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ
    averageScore: number; // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
}

export interface QuestionAttempt {
    questionId: number; // ID –≤–æ–ø—Ä–æ—Å–∞
    timestamp: number; // –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (Unix timestamp)
    answer: string; // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    feedback: Feedback; // –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç AI
    earnedPoints: number; // –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã
    difficulty: DifficultyLevel; // –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞)
    seniority: SeniorityLevel; // –£—Ä–æ–≤–µ–Ω—å –≤–æ–ø—Ä–æ—Å–∞
}

export interface GameState {
    currentQuestionIndex: number;
    rating: number;
    categoryScores: Record<string, { totalScore: number; count: number }>;
    keyPointScores: Record<string, { totalScore: number; count: number }>;
    consecutiveGoodAnswersOnSimpleQuestions: number;
    ratingHistory?: number[]; // –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    initialLevel?: 'junior' | 'mid' | 'senior' | 'staff'; // üÜï –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    selectedDifficulty?: 'all' | 'junior' | 'mid' | 'senior' | 'staff'; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    askedQuestionIds?: number[]; // ID —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    currentQuestionId?: number; // ID —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    levelProgress?: Record<'junior' | 'mid' | 'senior' | 'staff', LevelProgress>; // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é
    questionAttempts?: QuestionAttempt[]; // üÜï –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
}

export interface User {
    name: string; // Full name from Google
    email: string;
    given_name: string;
    family_name: string;
    picture?: string;
}

export interface Session {
    user: User;
    gameState: GameState;
}

export interface Feedback {
    overallScore: number;
    evaluation: {
        strengths: string[];
        weaknesses: string[];
    };
    categoryBreakdown: { category: string; score: number; comment: string }[];
}


// ============================================================================
// –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –ë–ê–ó–´ –í–û–ü–†–û–°–û–í
// ============================================================================

export interface Question {
  id: number;
  difficulty: DifficultyLevel;
  seniority: SeniorityLevel;
  categories: Category[];
  text: string;
  bigTech: BigTechCompany[];
  keyPoints?: KeyPoint[];
}

export type DifficultyLevel = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;

export type SeniorityLevel = 'junior' | 'mid' | 'senior' | 'staff';

export type Category = 
  | 'foundations'
  | 'statistics'
  | 'design'
  | 'metrics'
  | 'analysis'
  | 'interpretation'
  | 'pitfalls'
  | 'cases'
  | 'advanced_methods'
  | 'infrastructure'
  | 'leadership';

export type BigTechCompany = 'Meta' | 'Google' | 'Amazon' | 'Microsoft' | 'Netflix' | 'All';

export type KeyPoint = 
  | 'type-i-error'
  | 'type-ii-error'
  | 'statistical-power'
  | 'statistical-significance'
  | 'multiple-testing'
  | 'sample-size'
  | 'randomization'
  | 'experiment-duration'
  | 'experiment-types'
  | 'statistical-tests'
  | 'advanced-methods'
  | 'distribution-issues'
  | 'segmentation'
  | 'metric-types'
  | 'metric-issues'
  | 'business-metrics'
  | 'peeking-problem'
  | 'novelty-effects'
  | 'network-effects'
  | 'practical-significance'
  | 'causal-inference';