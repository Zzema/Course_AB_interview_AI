import React, { useEffect, useCallback, useRef, useState } from 'react';
import { styles } from '../styles';
import { User } from '../types';
import { GOOGLE_CLIENT_ID } from '../config/config';

// Helper to decode JWT for user info (no signature verification needed on client)
function decodeJwt(token: string): any {
    try {
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        return JSON.parse(jsonPayload);
    } catch (e) {
        console.error("Failed to decode JWT", e);
        return null;
    }
}

// Define google and aistudio on the window object for TypeScript
// FIX: Defined an AIStudio interface to resolve type conflicts and strongly type the aistudio object.
interface AIStudio {
    getAuthenticatedUser: () => Promise<User>;
}
declare global {
    interface Window {
        google: any;
        aistudio?: AIStudio;
    }
}

interface UserSetupProps {
    onStart: (user: User, selectedLevel?: 'junior' | 'mid' | 'senior' | 'staff') => void;
    isStarting: boolean;
}

const UserSetup: React.FC<UserSetupProps> = ({ onStart, isStarting }) => {
    const googleButtonRef = useRef<HTMLDivElement>(null);
    const [authError, setAuthError] = useState<string | null>(null);
    const [tempUser, setTempUser] = useState<User | null>(null);
    const [selectedLevel, setSelectedLevel] = useState<'junior' | 'mid' | 'senior' | 'staff'>('junior');
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
    const isAiStudio = !!window.aistudio;
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–π
    const isTelegramMobileApp = navigator.userAgent.includes('Telegram') && !window.location.hostname.includes('web.telegram.org');
    const isTelegramWeb = window.location.hostname.includes('web.telegram.org') || window.location.hostname.includes('t.me');
    const isTelegramBrowser = isTelegramMobileApp; // –¢–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç redirect

    // –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const addLog = (message: string, data?: any) => {
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
            console.log(message, data || '');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è Telegram –±—Ä–∞—É–∑–µ—Ä–∞
            const logEntry = {
                timestamp: new Date().toISOString(),
                message,
                data: data ? JSON.stringify(data).substring(0, 200) : null, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                isTelegramBrowser
            };

            const logs = JSON.parse(localStorage.getItem('auth-debug-logs') || '[]');
            logs.push(logEntry);
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
            if (logs.length > 20) logs.shift();
            localStorage.setItem('auth-debug-logs', JSON.stringify(logs));
        } catch (e) {
            // –ï—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–º–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å
            console.error('Logging failed:', message, e);
        }
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    useEffect(() => {
        addLog('üåê Browser detection:', {
            hostname: window.location.hostname,
            userAgent: navigator.userAgent.substring(0, 100) + '...',
            isTelegramMobileApp,
            isTelegramWeb,
            isTelegramBrowser,
            isAiStudio: !!window.aistudio,
            isStarting
        });
    }, []);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth <= 768);
        };
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);
    
        // –û—á–∏—Å—Ç–∫–∞ Google –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        if (tempUser && googleButtonRef.current) {
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º Google –∫–Ω–æ–ø–∫—É –∏ iframe
            googleButtonRef.current.innerHTML = '';
            googleButtonRef.current.style.display = 'none';

            // –¢–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–∞–µ–º Google SDK
            if (window.google && window.google.accounts && window.google.accounts.id) {
                try {
                    window.google.accounts.id.cancel();
                } catch (e) {
                    console.log('Google SDK cleanup:', e);
                }
            }
        }
    }, [tempUser]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ redirect callback –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    useEffect(() => {
        const hasAuthParams = window.location.hash.includes('access_token') ||
                             window.location.search.includes('code') ||
                             window.location.search.includes('error');

        if (isTelegramMobileApp && hasAuthParams) {
            addLog('üîµ Detected OAuth redirect callback in Telegram browser', {
                search: window.location.search,
                hash: window.location.hash
            });

            // Google –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–∫–µ–Ω –≤ URL, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ
            const urlParams = new URLSearchParams(window.location.search);
            const hashParams = new URLSearchParams(window.location.hash.substring(1));

            const code = urlParams.get('code') || hashParams.get('code');
            const error = urlParams.get('error') || hashParams.get('error');
            const accessToken = hashParams.get('access_token');

            if (error) {
                addLog('‚ùå OAuth error in redirect:', { error, urlParams: Object.fromEntries(urlParams), hashParams: Object.fromEntries(hashParams) });
                setAuthError(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
            } else if (accessToken) {
                addLog('üîµ Found access token in hash, this should not happen with redirect mode');
                setAuthError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            } else if (code) {
                addLog('üîµ Found authorization code, processing...', { code: code.substring(0, 20) + '...' });
                // –í redirect —Ä–µ–∂–∏–º–µ —Å –∫–æ–¥–æ–º –Ω—É–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ backend
                // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å popup —Ä–µ–∂–∏–º
                setAuthError("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.");
            }
        }
    }, [isTelegramMobileApp]);

    // --- Standard Google Sign-In Logic ---
    const handleCredentialResponse = useCallback(async (response: any) => {
        try {
            addLog('üîµ Google Sign-In callback received:', response);

            if (!response.credential) {
                addLog("‚ùå Google Sign-In failed: No credential returned.", { response });
                const errorMsg = isTelegramMobileApp
                    ? "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ."
                    : isTelegramWeb
                    ? "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram Web. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä."
                    : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
                setAuthError(errorMsg);
                return;
            }

            addLog('üîÑ Processing credential...');
            const userObject: any = decodeJwt(response.credential);
            addLog('üîÑ Decoded JWT:', { hasEmail: !!userObject?.email, hasName: !!userObject?.name });

            if (userObject && userObject.email) {
                const user: User = {
                    name: userObject.name,
                    email: userObject.email,
                    given_name: userObject.given_name,
                    family_name: userObject.family_name,
                    picture: userObject.picture,
                };

                addLog('üë§ User data extracted:', { email: user.email, name: user.given_name });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                addLog('üîç Checking game state...');
                const { fetchGameState } = await import('../lib/api');
                const existingState = await fetchGameState(user.email);

                if (existingState && existingState.selectedDifficulty) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
                    addLog('‚úÖ Found existing game state, skipping level selection');
                    onStart(user);
                } else {
                    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
                    addLog('üÜï New user, showing level selection');
                    setTempUser(user);
                }
            } else {
                 addLog("‚ùå Failed to parse user from Google credential.", { userObject });
                 const errorMsg = isTelegramMobileApp
                     ? "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä."
                     : isTelegramWeb
                     ? "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram Web. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É."
                     : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ Google.";
                 setAuthError(errorMsg);
            }
        } catch (error) {
            addLog("‚ùå Error processing Google credential:", { error: error?.toString() });
            const errorMsg = isTelegramMobileApp
                ? "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–±–∏–ª—å–Ω–æ–º Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä."
                : isTelegramWeb
                ? "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram Web. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É."
                : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.";
            setAuthError(errorMsg);
        }
    }, [onStart]);

    useEffect(() => {
        if (isAiStudio || isStarting || tempUser || (isTelegramMobileApp && authError)) return; // –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ –º–æ–±–∏–ª—å–Ω–æ–º Telegram

        const initializeGsi = () => {
            addLog('üöÄ Initializing Google Sign-In', {
                hasGoogle: !!window.google,
                hasButtonRef: !!googleButtonRef.current,
                tempUser: !!tempUser
            });

            if (window.google && googleButtonRef.current && !tempUser) {
                if (googleButtonRef.current.childElementCount > 0) {
                    addLog('‚ö†Ô∏è Google button already rendered, skipping');
                    return;
                }

                if (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID.startsWith("–í–ê–®")) {
                    addLog('‚ùå Google Client ID not configured');
                    setAuthError("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: Google Client ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª 'config.ts' –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á.");
                    return;
                }

                let authTimeout: NodeJS.Timeout | null = null;

                const wrappedCallback = (response: any) => {
                    if (authTimeout) {
                        clearTimeout(authTimeout);
                        authTimeout = null;
                    }
                    handleCredentialResponse(response);
                };

                const config: any = {
                    client_id: GOOGLE_CLIENT_ID,
                    callback: wrappedCallback
                };

                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–π
                if (isTelegramMobileApp) {
                    // –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º redirect —Ä–µ–∂–∏–º
                    config.ux_mode = 'redirect';
                    config.redirect_uri = window.location.origin;
                    addLog('üîµ Using redirect mode for Telegram mobile app', { config });

                    // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    authTimeout = setTimeout(() => {
                        addLog('‚è∞ Telegram mobile auth timeout after 30s');
                        const timeoutMsg = "–í—Ö–æ–¥ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 —Å–µ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
                        setAuthError(timeoutMsg);
                        // –û—á–∏—â–∞–µ–º Google –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                        if (googleButtonRef.current) {
                            googleButtonRef.current.innerHTML = '';
                            googleButtonRef.current.style.display = 'none';
                        }
                    }, 30000); // 30 —Å–µ–∫—É–Ω–¥
                } else if (isTelegramWeb) {
                    // –î–ª—è –≤–µ–± –≤–µ—Ä—Å–∏–∏ Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º popup —Ä–µ–∂–∏–º, –Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–≤—ã–±–æ—Ä
                    addLog('üîµ Using popup mode for Telegram Web', { config });
                } else {
                    // –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä - popup —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    addLog('üîµ Using default popup mode for regular browser');
                }

                addLog('üîß Initializing Google with config:', config);
                window.google.accounts.id.initialize(config);

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
                window.google.accounts.id.disableAutoSelect();
                addLog('‚úÖ Google Sign-In initialized successfully');

                addLog('üé® Rendering Google button...');
                window.google.accounts.id.renderButton(
                    googleButtonRef.current,
                    {
                        theme: "filled_black",
                        size: "large",
                        type: 'standard',
                        text: 'signin_with',
                        shape: 'rectangular',
                        logo_alignment: 'left',
                        width: '280'
                    }
                );
                addLog('‚úÖ Google button rendered');
            }
        }

        if (!window.google) {
            addLog('‚è≥ Waiting for Google SDK to load...');
            const interval = setInterval(() => {
                if (window.google) {
                    addLog('‚úÖ Google SDK loaded, initializing...');
                    clearInterval(interval);
                    initializeGsi();
                }
            }, 100);
            return () => clearInterval(interval);
        } else {
            addLog('‚úÖ Google SDK already loaded');
            initializeGsi();
        }
    }, [isStarting, handleCredentialResponse, isAiStudio, tempUser]);

    // --- AI Studio Logic ---
    const handleAiStudioLogin = async () => {
        try {
            const userInfo = await window.aistudio!.getAuthenticatedUser();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const { fetchGameState } = await import('../lib/api');
            const existingState = await fetchGameState(userInfo.email);
            
            if (existingState && existingState.selectedDifficulty) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
                console.log('‚úÖ Found existing game state, skipping level selection');
                onStart(userInfo);
            } else {
                // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
                console.log('üÜï New user, showing level selection');
                setTempUser(userInfo);
            }
        } catch(e) {
            console.error("AI Studio authentication failed:", e);
            setAuthError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ AI Studio. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    const handleStartWithLevel = () => {
        if (tempUser) {
            onStart(tempUser, selectedLevel);
        }
    };
    
    const renderContent = () => {
        try {
            if (isStarting) {
                return <p style={{textAlign: 'center', color: 'var(--text-secondary)'}}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...</p>;
            }

        if (authError) {
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∏–∑ localStorage –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const getDebugLogs = () => {
                try {
                    const logs = JSON.parse(localStorage.getItem('auth-debug-logs') || '[]');
                    return logs.slice(-10); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ–≤
                } catch (e) {
                    return [];
                }
            };

            const debugLogs = getDebugLogs();
            const debugInfo = isTelegramBrowser ? `
Browser: ${navigator.userAgent}
Location: ${window.location.href}
Telegram: ${isTelegramBrowser}
Time: ${new Date().toISOString()}
Logs: ${debugLogs.length} entries
            `.trim() : null;

            return (
                <div style={{color: 'var(--error-color)', textAlign: 'center', padding: '1rem', backgroundColor: 'rgba(255, 82, 82, 0.1)', borderRadius: '8px', border: '1px solid var(--error-color)'}}>
                    <p style={{fontWeight: 'bold', marginBottom: '0.5rem'}}>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</p>
                    <p style={{fontSize: '0.9rem', marginBottom: '0.5rem'}}>{authError}</p>
                    {debugInfo && (
                        <details style={{fontSize: '0.7rem', textAlign: 'left', marginTop: '0.5rem'}}>
                            <summary style={{cursor: 'pointer', fontWeight: 'bold'}}>üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
                            <pre style={{
                                backgroundColor: 'rgba(0,0,0,0.1)',
                                padding: '0.5rem',
                                borderRadius: '4px',
                                marginTop: '0.25rem',
                                whiteSpace: 'pre-wrap',
                                fontSize: '0.6rem',
                                overflow: 'auto'
                            }}>
                                {debugInfo}
                            </pre>
                        </details>
                    )}

                    {debugLogs.length > 0 && (
                        <details style={{fontSize: '0.7rem', textAlign: 'left', marginTop: '0.5rem'}}>
                            <summary style={{cursor: 'pointer', fontWeight: 'bold'}}>üîç –õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ({debugLogs.length})</summary>
                            <button
                                onClick={() => {
                                    localStorage.removeItem('auth-debug-logs');
                                    window.location.reload();
                                }}
                                style={{
                                    marginTop: '0.25rem',
                                    padding: '0.25rem 0.5rem',
                                    fontSize: '0.6rem',
                                    backgroundColor: 'rgba(255,255,255,0.1)',
                                    border: '1px solid rgba(255,255,255,0.3)',
                                    borderRadius: '3px',
                                    color: 'white',
                                    cursor: 'pointer'
                                }}
                            >
                                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
                            </button>
                            <div style={{
                                backgroundColor: 'rgba(0,0,0,0.1)',
                                padding: '0.5rem',
                                borderRadius: '4px',
                                marginTop: '0.25rem',
                                maxHeight: '200px',
                                overflow: 'auto',
                                fontSize: '0.6rem'
                            }}>
                                {debugLogs.map((log: any, index: number) => (
                                    <div key={index} style={{marginBottom: '0.25rem', borderBottom: '1px solid rgba(255,255,255,0.1)', paddingBottom: '0.25rem'}}>
                                        <div style={{color: '#888', fontSize: '0.5rem'}}>
                                            {new Date(log.timestamp).toLocaleTimeString()}
                                        </div>
                                        <div style={{fontWeight: 'bold'}}>{log.message}</div>
                                        {log.data && (
                                            <pre style={{margin: '0.25rem 0', fontSize: '0.5rem', whiteSpace: 'pre-wrap'}}>
                                                {JSON.stringify(log.data, null, 2)}
                                            </pre>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </details>
                    )}
                </div>
            );
        }

        // –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (tempUser) {
            return (
                <div style={{
                    width: '100%', 
                    maxWidth: isMobile ? '100%' : '450px', 
                    display: 'flex', 
                    flexDirection: 'column', 
                    gap: isMobile ? '1rem' : '1.5rem', 
                    alignItems: 'center',
                    padding: isMobile ? '0' : '0',
                    position: 'relative',
                    zIndex: 10, // –ü–æ–≤–µ—Ä—Ö Google –∫–Ω–æ–ø–∫–∏
                    backgroundColor: 'var(--surface-color)' // –ü–µ—Ä–µ–∫—Ä—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–º
                }}>
                    <div style={{textAlign: 'center'}}>
                        <p style={{
                            fontSize: isMobile ? '1rem' : '1.1rem', 
                            marginBottom: '0.5rem', 
                            color: 'var(--text-primary)'
                        }}>
                            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <strong>{tempUser.given_name}!</strong>
                        </p>
                        <p style={{
                            color: 'var(--text-secondary)', 
                            fontSize: isMobile ? '0.85rem' : '0.95rem',
                            marginBottom: '0.25rem'
                        }}>
                            –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                        </p>
                        <p style={{
                            color: 'rgba(139, 92, 246, 0.8)', 
                            fontSize: isMobile ? '0.75rem' : '0.85rem',
                            fontStyle: 'italic'
                        }}>
                            –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∞—à —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
                        </p>
                    </div>
                    
                    <div style={{
                        display: 'grid',
                        gridTemplateColumns: isMobile ? '1fr 1fr' : '1fr 1fr',
                        gap: isMobile ? '0.75rem' : '1rem',
                        width: '100%'
                    }}>
                        {[
                            { value: 'junior', icon: 'üå±', label: 'Junior', desc: '–ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã' },
                            { value: 'mid', icon: '‚≠ê', label: 'Middle', desc: '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å' },
                            { value: 'senior', icon: 'üíé', label: 'Senior', desc: '–°–ª–æ–∂–Ω—ã–µ –∫–µ–π—Å—ã' },
                            { value: 'staff', icon: 'üëë', label: 'Staff', desc: '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ç–µ–º—ã' }
                        ].map(level => (
                            <button
                                key={level.value}
                                onClick={() => setSelectedLevel(level.value as any)}
                                style={{
                                    padding: isMobile ? '0.75rem 0.5rem' : '1rem 0.75rem',
                                    borderRadius: isMobile ? '10px' : '12px',
                                    border: selectedLevel === level.value 
                                        ? '2px solid var(--primary-color)' 
                                        : '2px solid var(--border-color)',
                                    backgroundColor: selectedLevel === level.value 
                                        ? 'rgba(106, 90, 205, 0.1)' 
                                        : 'var(--bg-color)',
                                    cursor: 'pointer',
                                    transition: 'all 0.2s',
                                    display: 'flex',
                                    flexDirection: 'column',
                                    alignItems: 'center',
                                    gap: isMobile ? '0.25rem' : '0.4rem',
                                    minHeight: 'auto',
                                    height: isMobile ? 'auto' : '110px'
                                }}
                                onMouseOver={(e) => {
                                    if (selectedLevel !== level.value) {
                                        e.currentTarget.style.borderColor = 'var(--primary-color)';
                                    }
                                }}
                                onMouseOut={(e) => {
                                    if (selectedLevel !== level.value) {
                                        e.currentTarget.style.borderColor = 'var(--border-color)';
                                    }
                                }}
                            >
                                <div style={{fontSize: isMobile ? '1.5rem' : '2rem'}}>{level.icon}</div>
                                <div style={{
                                    fontWeight: 'bold', 
                                    fontSize: isMobile ? '0.9rem' : '1rem', 
                                    color: 'var(--text-primary)'
                                }}>{level.label}</div>
                                <div style={{
                                    fontSize: isMobile ? '0.7rem' : '0.8rem', 
                                    color: 'var(--text-secondary)',
                                    textAlign: 'center',
                                    lineHeight: '1.2'
                                }}>{level.desc}</div>
                            </button>
                        ))}
                    </div>
                    
                    <button 
                        onClick={handleStartWithLevel} 
                        style={{
                            ...styles.submitButton,
                            width: '100%',
                            maxWidth: isMobile ? '100%' : '300px',
                            fontSize: isMobile ? '0.95rem' : '1rem',
                            padding: isMobile ? '0.9rem 1.5rem' : '1rem 2rem'
                        }}
                    >
                        –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üöÄ
                    </button>
                </div>
            );
        }

        if (isAiStudio) {
            return (
                 <div style={{width: '100%', display: 'flex', flexDirection: 'column', gap: '1.5rem', alignItems: 'center'}}>
                     <p style={{textAlign: 'center', color: 'var(--text-secondary)'}}>
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç AI Studio –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
                    </p>
                    <button onClick={handleAiStudioLogin} style={styles.submitButton}>
                        –í–æ–π—Ç–∏
                    </button>
                </div>
            )
        }

        return (
            <div style={{width: '100%', display: 'flex', flexDirection: 'column', gap: '1.5rem', alignItems: 'center'}}>
                 <p style={{textAlign: 'center', color: 'var(--text-secondary)'}}>
                    {isTelegramMobileApp
                        ? "–í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ."
                        : isTelegramWeb
                        ? "–í—ã –≤ Telegram Web - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
                        : "–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é Google, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
                    }
                </p>
                <div 
                    ref={googleButtonRef} 
                    style={{
                        display: 'flex', 
                        justifyContent: 'center',
                        width: '100%',
                        position: 'relative',
                        zIndex: 1
                    }}
                ></div>
            </div>
        );
        } catch (error) {
            console.error('Render error:', error);
            return (
                <div style={{color: 'var(--error-color)', textAlign: 'center', padding: '2rem'}}>
                    <p style={{fontWeight: 'bold'}}>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                    <button
                        onClick={() => window.location.reload()}
                        style={{
                            marginTop: '1rem',
                            padding: '0.5rem 1rem',
                            backgroundColor: 'var(--primary-color)',
                            color: 'white',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: 'pointer'
                        }}
                    >
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            );
        }
    };

    return (
        <div style={{
            ...styles.userSetup,
            maxWidth: isMobile ? '100%' : '550px',
            padding: isMobile ? '1.5rem 1rem' : '2rem',
            margin: isMobile ? '0' : 'auto'
        }} className="fade-in">
            <h1 style={{
                ...styles.title,
                fontSize: isMobile ? '1.8rem' : '2.5rem'
            }}>A/B Hero</h1>
            <p style={{
                ...styles.subtitle,
                fontSize: isMobile ? '0.9rem' : '1rem'
            }}>–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º</p>
            {renderContent()}
        </div>
    );
};

export default UserSetup;