/**
 * ============================================================================
 * QUEST GENERATOR
 * ============================================================================
 * –ï–¥–∏–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–≤–µ—Å—Ç–æ–≤
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É milestone –∫–≤–µ—Å—Ç–æ–≤ + –Ω–æ–≤—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
 * 
 * –¢–∏–ø—ã –∫–≤–µ—Å—Ç–æ–≤:
 * 1. DAILY - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (1 –∞–∫—Ç–∏–≤–Ω—ã–π –≤ –¥–µ–Ω—å)
 * 2. ACHIEVEMENT - –†–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ—Ä–∏–∏, recovery quest)
 * 3. MILESTONE - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ (50 –≤–æ–ø—Ä–æ—Å–æ–≤, 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç.–¥.)
 * 
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: generateAllQuests() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
 */

import { Quest, GameState, Category } from '../types';
import { 
  getEndOfDay, 
  getUnclaimedMilestones,
  getCurrentDateString 
} from './activitySeriesManager';
import { 
  calculateWeightedAverageScore 
} from './xpCalculator';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
import { CATEGORIES_CONFIG } from '../data/constants';

// ============================================================================
// –¢–ò–ü–´ –î–õ–Ø –í–ù–£–¢–†–ï–ù–ù–ï–ô –õ–û–ì–ò–ö–ò
// ============================================================================

interface DailyQuestConfig {
  description: string;
  target: number;
  minScore: number;
  xpReward: number;
  itemReward?: {
    type: 'question_skip' | 'series_protection';
    value: number;
  };
}

interface AbilityScore {
  key: string;
  score: number;
}

// ============================================================================
// –ì–ï–ù–ï–†–ê–¢–û–† –ï–ñ–ï–î–ù–ï–í–ù–´–• –ö–í–ï–°–¢–û–í
// ============================================================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –õ–û–ì–ò–ö–ê –ê–î–ê–ü–¢–ê–¶–ò–ò:
 * - –ü–µ—Ä–≤—ã–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤: –ª–µ–≥–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ (1 –≤–æ–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π 5+)
 * - –î–∞–ª–µ–µ: –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 * - Junior: 2 –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 6+
 * - Mid: 3 –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 7+
 * - Senior: 3 –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 7+
 * - Staff: 4 –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 8+
 * 
 * @param gameState - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @param currentDate - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @returns –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç –∏–ª–∏ null –µ—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
 */
export function generateDailyQuest(
  gameState: GameState,
  currentDate: string
): Quest | null {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫–≤–µ—Å—Ç
  if (gameState.activitySeries?.todayCompleted) {
    console.log('‚úÖ Daily quest already completed today');
    return null;
  }
  
  const difficulty = gameState.selectedDifficulty || 'junior';
  const totalAnswered = gameState.questionAttempts?.length || 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–∞
  const config = getDailyQuestConfig(difficulty, totalAnswered);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è)
  const progress = calculateDailyProgress(gameState, currentDate, config);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞–≥—Ä–∞–¥
  const rewards = [
    {
      type: 'xp' as const,
      value: config.xpReward,
      description: `+${config.xpReward} XP`
    }
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
  if (config.itemReward) {
    rewards.push({
      type: 'item' as const,
      value: config.itemReward.value,
      itemType: config.itemReward.type,
      description: config.itemReward.type === 'question_skip' 
        ? 'üé≤ –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞'
        : 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —Å–µ—Ä–∏–∏'
    });
  }
  
  return {
    id: `daily-${currentDate}`,
    title: `üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ`,
    description: config.description,
    progress: {
      current: progress,
      total: config.target
    },
    reward: config.xpReward,
    rewards: rewards,
    completed: progress >= config.target,
    urgent: false,
    type: 'daily',
    expiresAt: getEndOfDay(currentDate)
  };
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
function getDailyQuestConfig(
  difficulty: string,
  totalAnswered: number
): DailyQuestConfig {
  // ========================================
  // –û–ù–ë–û–†–î–ò–ù–ì: –ü–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π - –ª–µ–≥–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
  // ========================================
  if (totalAnswered === 0) {
    return {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å! üéØ',
      target: 1,
      minScore: 0,
      xpReward: 30, // –±—ã–ª–æ 50
      itemReward: {
        type: 'question_skip',
        value: 1
      }
    };
  }
  
  if (totalAnswered < 3) {
    return {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ 1 –≤–æ–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π 5+ ‚≠ê',
      target: 1,
      minScore: 5,
      xpReward: 20, // –±—ã–ª–æ 30
      itemReward: {
        type: 'question_skip',
        value: 1
      }
    };
  }
  
  if (totalAnswered < 7) {
    return {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 6+ ‚≠ê‚≠ê',
      target: 2,
      minScore: 6,
      xpReward: 25 // –±—ã–ª–æ 40
    };
  }
  
  // ========================================
  // –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
  // ========================================
  const configs: Record<string, DailyQuestConfig> = {
    junior: {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞ Junior —Å –æ—Ü–µ–Ω–∫–æ–π 6+ ‚≠ê‚≠ê',
      target: 2,
      minScore: 6,
      xpReward: 35 // –±—ã–ª–æ 50
    },
    mid: {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞ Mid —Å –æ—Ü–µ–Ω–∫–æ–π 7+ ‚≠ê‚≠ê‚≠ê',
      target: 3,
      minScore: 7,
      xpReward: 55 // –±—ã–ª–æ 80
    },
    senior: {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞ Senior —Å –æ—Ü–µ–Ω–∫–æ–π 7+ üíéüíéüíé',
      target: 3,
      minScore: 7,
      xpReward: 80 // –±—ã–ª–æ 120
    },
    staff: {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ 4 –≤–æ–ø—Ä–æ—Å–∞ Staff —Å –æ—Ü–µ–Ω–∫–æ–π 8+ üëëüëëüëëüëë',
      target: 4,
      minScore: 8,
      xpReward: 120 // –±—ã–ª–æ 180
    },
    all: {
      description: '–û—Ç–≤–µ—Ç—å –Ω–∞ 3 –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 7+ üéØüéØüéØ',
      target: 3,
      minScore: 7,
      xpReward: 70 // –±—ã–ª–æ 100
    }
  };
  
  return configs[difficulty] || configs.junior;
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
 * –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
 * 
 * @param gameState - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * @param currentDate - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ YYYY-MM-DD
 * @param config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ minScore)
 */
export function calculateDailyProgress(
  gameState: GameState,
  currentDate: string,
  config: DailyQuestConfig
): number {
  if (!gameState.questionAttempts) return 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (00:00:00)
  const todayStart = new Date(currentDate + 'T00:00:00').getTime();
  const todayEnd = new Date(currentDate + 'T23:59:59').getTime();
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –æ—Ü–µ–Ω–∫–æ–π
  const todayAnswers = gameState.questionAttempts.filter(attempt => {
    const isToday = attempt.timestamp >= todayStart && attempt.timestamp <= todayEnd;
    const meetsScore = attempt.feedback.overallScore >= config.minScore;
    
    return isToday && meetsScore;
  });
  
  return todayAnswers.length;
}

// ============================================================================
// –ì–ï–ù–ï–†–ê–¢–û–† –ö–í–ï–°–¢–û–í –ó–ê –î–û–°–¢–ò–ñ–ï–ù–ò–Ø (–°–ï–†–ò–ò)
// ============================================================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –∑–∞ –Ω–µ–ø—Ä–µ—Ç–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ milestone'—ã —Å–µ—Ä–∏–∏
 * –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ" –∫–≤–µ—Å—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É"
 */
export function generateSeriesQuests(gameState: GameState): Quest[] {
  if (!gameState.activitySeries) return [];
  
  const unclaimedMilestones = getUnclaimedMilestones(gameState.activitySeries);
  
  return unclaimedMilestones.map(milestone => ({
    id: `series-${milestone.days}`,
    title: `üî• –°–µ—Ä–∏—è ${milestone.days} –¥–Ω–µ–π`,
    description: `–¢—ã –∑–∞–Ω–∏–º–∞–ª—Å—è ${milestone.days} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –ó–∞–±–µ—Ä–∏ –Ω–∞–≥—Ä–∞–¥—É`,
    progress: { current: milestone.days, total: milestone.days },
    reward: milestone.reward.value,
    rewards: [milestone.reward],
    completed: true, // —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
    urgent: false,
    type: 'achievement' as const
  }));
}

// ============================================================================
// –ì–ï–ù–ï–†–ê–¢–û–† –î–û–õ–ì–û–°–†–û–ß–ù–´–• MILESTONE –ö–í–ï–°–¢–û–í
// ============================================================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ milestone –∫–≤–µ—Å—Ç—ã
 * –≠—Ç–æ —Ç–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤ (50 –≤–æ–ø—Ä–æ—Å–æ–≤, 100 –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏—è 80% –∏ —Ç.–¥.)
 */
export function generateMilestoneQuests(gameState: GameState): Quest[] {
  const totalAnswered = gameState.questionAttempts?.length || 0;
  const abilities = calculateAbilities(gameState);
  const avgScore = calculateWeightedAverageScore(gameState.questionAttempts || []);
  
  const quests: Quest[] = [];
  
  // ========================================
  // URGENT QUEST: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ rating –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π)
  // ========================================
  if (gameState.rating < -50) {
    quests.push({
      id: 'milestone-recovery',
      title: 'üÜò –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
      description: `–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: ${gameState.rating}. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π 6+, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å +50 –æ–ø—ã—Ç–∞!`,
      progress: { 
        current: Math.max(0, gameState.rating + 50), 
        total: 50 
      },
      reward: 50,
      completed: false,
      urgent: true,
      type: 'achievement'
    });
  }
  
  // ========================================
  // MILESTONE –ö–í–ï–°–¢–´ - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏
  // ========================================
  
  // 50 –≤–æ–ø—Ä–æ—Å–æ–≤
  quests.push({
    id: 'milestone-50-questions',
    title: '–û—Ç–≤–µ—Ç—å –Ω–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤',
    description: `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${totalAnswered}/50`,
    progress: { current: Math.min(totalAnswered, 50), total: 50 },
    reward: 200,
    completed: totalAnswered >= 50,
    type: 'milestone'
  });
  
  // 80% –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const maxCategoryScore = Math.max(...abilities.map(a => a.score), 0);
  quests.push({
    id: 'milestone-category-80',
    title: '–î–æ—Å—Ç–∏–≥–Ω–∏ 80% –≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    description: `–õ—É—á—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${Math.round(maxCategoryScore)}%`,
    progress: { 
      current: Math.min(Math.round(maxCategoryScore), 80), 
      total: 80 
    },
    reward: 150,
    completed: maxCategoryScore >= 80,
    type: 'milestone'
  });
  
  // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 8/10
  quests.push({
    id: 'milestone-avg-8',
    title: '–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –æ—Ç–≤–µ—Ç 8/10',
    description: `–¢–µ–∫—É—â–∞—è: ${avgScore.toFixed(1)}/10`,
    progress: { 
      current: Math.min(avgScore, 8), 
      total: 8 
    },
    reward: 100,
    completed: avgScore >= 8.0,
    type: 'milestone'
  });
  
  // 100 –≤–æ–ø—Ä–æ—Å–æ–≤
  quests.push({
    id: 'milestone-100-questions',
    title: '–û—Ç–≤–µ—Ç—å –Ω–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤',
    description: `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${totalAnswered}/100`,
    progress: { current: Math.min(totalAnswered, 100), total: 100 },
    reward: 500,
    completed: totalAnswered >= 100,
    type: 'milestone'
  });
  
  return quests;
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–¥–ª—è –∫–≤–µ—Å—Ç–∞ "80% –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
 * –ö–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ StatisticsScreenGamified –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 */
function calculateAbilities(gameState: GameState): AbilityScore[] {
  return Object.entries(CATEGORIES_CONFIG).map(([key, config]) => {
    const categoryScore = gameState.categoryScores[key];
    const score = categoryScore && categoryScore.count > 0 
      ? (categoryScore.totalScore / categoryScore.count) * 10 
      : 0;
    return {
      key,
      score
    };
  });
}

// ============================================================================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–ë–™–ï–î–ò–ù–Ø–ï–¢ –í–°–ï –ö–í–ï–°–¢–´
// ============================================================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –ü–û–†–Ø–î–û–ö –ö–í–ï–°–¢–û–í (–≤–∞–∂–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è):
 * 1. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç (–µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω)
 * 2. –ö–≤–µ—Å—Ç—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–µ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–µ—Ç–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
 * 3. –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ milestone –∫–≤–µ—Å—Ç—ã
 * 
 * @param gameState - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @param currentDate - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)
 * @returns –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
 */
export function generateAllQuests(
  gameState: GameState,
  currentDate?: string
): Quest[] {
  const date = currentDate || getCurrentDateString();
  const allQuests: Quest[] = [];
  
  // 1. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç (–≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
  const dailyQuest = generateDailyQuest(gameState, date);
  if (dailyQuest) {
    allQuests.push(dailyQuest);
  }
  
  // 2. –ö–≤–µ—Å—Ç—ã –∑–∞ —Å–µ—Ä–∏–∏ (–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ milestone'—ã)
  const seriesQuests = generateSeriesQuests(gameState);
  allQuests.push(...seriesQuests);
  
  // 3. –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ milestone –∫–≤–µ—Å—Ç—ã
  const milestoneQuests = generateMilestoneQuests(gameState);
  allQuests.push(...milestoneQuests);
  
  console.log('üìã Generated quests:', {
    daily: dailyQuest ? 1 : 0,
    series: seriesQuests.length,
    milestones: milestoneQuests.length,
    total: allQuests.length
  });
  
  return allQuests;
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è activitySeries.todayCompleted
 */
export function isDailyQuestCompleted(
  gameState: GameState,
  currentDate: string
): boolean {
  const dailyQuest = generateDailyQuest(gameState, currentDate);
  
  if (!dailyQuest) return true; // —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞–Ω–µ–µ
  
  return dailyQuest.completed;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
 */
export function getDailyQuestTimeRemaining(
  gameState: GameState,
  currentDate: string
): number | null {
  const dailyQuest = generateDailyQuest(gameState, currentDate);
  
  if (!dailyQuest || !dailyQuest.expiresAt) return null;
  
  return Math.max(0, dailyQuest.expiresAt - Date.now());
}

