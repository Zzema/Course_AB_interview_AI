/**
 * ============================================================================
 * REFERRAL SYSTEM - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
 * ============================================================================
 * –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–æ–≤
 */

import { GameState, Quest } from '../types';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function generateReferralCode(userName: string): string {
  const randomPart = Math.random().toString(36).substring(2, 6).toUpperCase();
  const namePart = userName.substring(0, 3).toUpperCase().replace(/[^A-Z]/g, '');
  return `${namePart}${randomPart}`;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function initializeReferralSystem(gameState: GameState, userEmail: string): GameState {
  if (!gameState.referralCode) {
    gameState.referralCode = userEmail; // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    gameState.referrals = [];
    gameState.referralRewards = {
      count: 0,
      xpEarned: 0,
      itemsEarned: []
    };
  }
  return gameState;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
export function processReferralLink(
  gameState: GameState,
  referrerCode: string | null
): GameState {
  if (referrerCode && !gameState.referredBy) {
    gameState.referredBy = referrerCode;
    console.log(`User was referred by: ${referrerCode}`);
  }
  return gameState;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
 */
export function addReferral(
  referrerGameState: GameState,
  referralCode: string
): { gameState: GameState; rewards: any[] } {
  if (!referrerGameState.referrals) {
    referrerGameState.referrals = [];
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
  if (referrerGameState.referrals.includes(referralCode)) {
    return { gameState: referrerGameState, rewards: [] };
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  referrerGameState.referrals.push(referralCode);
  
  if (!referrerGameState.referralRewards) {
    referrerGameState.referralRewards = {
      count: 0,
      xpEarned: 0,
      itemsEarned: []
    };
  }

  referrerGameState.referralRewards.count++;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const rewards = getReferralRewards(referrerGameState.referralRewards.count);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
  referrerGameState.rating += rewards.xp;
  referrerGameState.referralRewards.xpEarned += rewards.xp;

  if (rewards.items) {
    if (!referrerGameState.inventory) {
      referrerGameState.inventory = {
        questionSkips: 0,
        seriesProtection: 0
      };
    }

    rewards.items.forEach(item => {
      if (item.type === 'question_skip') {
        referrerGameState.inventory!.questionSkips += item.value;
      } else if (item.type === 'series_protection') {
        referrerGameState.inventory!.seriesProtection += item.value;
      }
      
      referrerGameState.referralRewards!.itemsEarned.push(item);
    });
  }

  return { gameState: referrerGameState, rewards };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 */
export function getReferralRewards(count: number): {
  xp: number;
  items?: { type: string; value: number; description: string }[];
  badge?: string;
} {
  switch (count) {
    case 1:
      return {
        xp: 100,
        items: [{ type: 'question_skip', value: 1, description: 'üé≤ –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞' }]
      };
    case 3:
      return {
        xp: 300,
        items: [{ type: 'series_protection', value: 1, description: 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —Å–µ—Ä–∏–∏' }],
        badge: 'üéØ –†–µ–∫—Ä—É—Ç–µ—Ä'
      };
    case 5:
      return {
        xp: 500,
        badge: 'üåü –ê–º–±–∞—Å—Å–∞–¥–æ—Ä'
      };
    case 10:
      return {
        xp: 1000,
        badge: 'üëë –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä'
      };
    default:
      // –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ +100 XP
      return {
        xp: 100
      };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç
 */
export function generateReferralQuest(gameState: GameState): Quest | null {
  const referralCount = gameState.referrals?.length || 0;

  // –ö–≤–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –º–µ–Ω–µ–µ 10 —á–µ–ª–æ–≤–µ–∫
  if (referralCount >= 10) {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π milestone
  let nextMilestone = 1;
  if (referralCount >= 5) nextMilestone = 10;
  else if (referralCount >= 3) nextMilestone = 5;
  else if (referralCount >= 1) nextMilestone = 3;

  const rewards = getReferralRewards(nextMilestone);
  const rewardsArray = [
    {
      type: 'xp' as const,
      value: rewards.xp,
      description: `+${rewards.xp} XP`
    }
  ];

  if (rewards.items) {
    rewards.items.forEach(item => {
      rewardsArray.push({
        type: 'item' as const,
        value: item.value,
        itemType: item.type as any,
        description: item.description
      });
    });
  }

  return {
    id: `referral-${nextMilestone}`,
    title: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π',
    description: `–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∏ –Ω–∞–≥—Ä–∞–¥—É –∫–æ–≥–¥–∞ –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è (${referralCount}/${nextMilestone})`,
    progress: {
      current: referralCount,
      total: nextMilestone
    },
    reward: rewards.xp,
    rewards: rewardsArray,
    completed: referralCount >= nextMilestone,
    urgent: false,
    type: 'achievement'
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç URL —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
 */
export function getReferralLink(referralCode: string): string {
  return `https://course-ab-interview.web.app?ref=${referralCode}`;
}

/**
 * –ü–∞—Ä—Å–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ URL
 */
export function parseReferralFromURL(): string | null {
  const params = new URLSearchParams(window.location.search);
  return params.get('ref');
}

